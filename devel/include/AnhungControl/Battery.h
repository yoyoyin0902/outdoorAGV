// Generated by gencpp from file AnhungControl/Battery.msg
// DO NOT EDIT!


#ifndef ANHUNGCONTROL_MESSAGE_BATTERY_H
#define ANHUNGCONTROL_MESSAGE_BATTERY_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace AnhungControl
{
template <class ContainerAllocator>
struct Battery_
{
  typedef Battery_<ContainerAllocator> Type;

  Battery_()
    : Voltage(0.0)
    , Current(0.0)
    , RelativeSOC1(0.0)
    , RelativeSOC2(0.0)
    , RelativeSOC3(0.0)
    , RelativeSOC4(0.0)
    , AbsoluteSOC1(0.0)
    , AbsoluteSOC2(0.0)
    , AbsoluteSOC3(0.0)
    , AbsoluteSOC4(0.0)
    , Temp1(0.0)
    , Temp2(0.0)
    , Temp3(0.0)
    , Temp4(0.0)  {
    }
  Battery_(const ContainerAllocator& _alloc)
    : Voltage(0.0)
    , Current(0.0)
    , RelativeSOC1(0.0)
    , RelativeSOC2(0.0)
    , RelativeSOC3(0.0)
    , RelativeSOC4(0.0)
    , AbsoluteSOC1(0.0)
    , AbsoluteSOC2(0.0)
    , AbsoluteSOC3(0.0)
    , AbsoluteSOC4(0.0)
    , Temp1(0.0)
    , Temp2(0.0)
    , Temp3(0.0)
    , Temp4(0.0)  {
  (void)_alloc;
    }



   typedef double _Voltage_type;
  _Voltage_type Voltage;

   typedef double _Current_type;
  _Current_type Current;

   typedef double _RelativeSOC1_type;
  _RelativeSOC1_type RelativeSOC1;

   typedef double _RelativeSOC2_type;
  _RelativeSOC2_type RelativeSOC2;

   typedef double _RelativeSOC3_type;
  _RelativeSOC3_type RelativeSOC3;

   typedef double _RelativeSOC4_type;
  _RelativeSOC4_type RelativeSOC4;

   typedef double _AbsoluteSOC1_type;
  _AbsoluteSOC1_type AbsoluteSOC1;

   typedef double _AbsoluteSOC2_type;
  _AbsoluteSOC2_type AbsoluteSOC2;

   typedef double _AbsoluteSOC3_type;
  _AbsoluteSOC3_type AbsoluteSOC3;

   typedef double _AbsoluteSOC4_type;
  _AbsoluteSOC4_type AbsoluteSOC4;

   typedef double _Temp1_type;
  _Temp1_type Temp1;

   typedef double _Temp2_type;
  _Temp2_type Temp2;

   typedef double _Temp3_type;
  _Temp3_type Temp3;

   typedef double _Temp4_type;
  _Temp4_type Temp4;





  typedef boost::shared_ptr< ::AnhungControl::Battery_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::AnhungControl::Battery_<ContainerAllocator> const> ConstPtr;

}; // struct Battery_

typedef ::AnhungControl::Battery_<std::allocator<void> > Battery;

typedef boost::shared_ptr< ::AnhungControl::Battery > BatteryPtr;
typedef boost::shared_ptr< ::AnhungControl::Battery const> BatteryConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::AnhungControl::Battery_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::AnhungControl::Battery_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::AnhungControl::Battery_<ContainerAllocator1> & lhs, const ::AnhungControl::Battery_<ContainerAllocator2> & rhs)
{
  return lhs.Voltage == rhs.Voltage &&
    lhs.Current == rhs.Current &&
    lhs.RelativeSOC1 == rhs.RelativeSOC1 &&
    lhs.RelativeSOC2 == rhs.RelativeSOC2 &&
    lhs.RelativeSOC3 == rhs.RelativeSOC3 &&
    lhs.RelativeSOC4 == rhs.RelativeSOC4 &&
    lhs.AbsoluteSOC1 == rhs.AbsoluteSOC1 &&
    lhs.AbsoluteSOC2 == rhs.AbsoluteSOC2 &&
    lhs.AbsoluteSOC3 == rhs.AbsoluteSOC3 &&
    lhs.AbsoluteSOC4 == rhs.AbsoluteSOC4 &&
    lhs.Temp1 == rhs.Temp1 &&
    lhs.Temp2 == rhs.Temp2 &&
    lhs.Temp3 == rhs.Temp3 &&
    lhs.Temp4 == rhs.Temp4;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::AnhungControl::Battery_<ContainerAllocator1> & lhs, const ::AnhungControl::Battery_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace AnhungControl

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::AnhungControl::Battery_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::AnhungControl::Battery_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::AnhungControl::Battery_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::AnhungControl::Battery_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::AnhungControl::Battery_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::AnhungControl::Battery_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::AnhungControl::Battery_<ContainerAllocator> >
{
  static const char* value()
  {
    return "49990e1b1b63370ee64f7539c711f8c7";
  }

  static const char* value(const ::AnhungControl::Battery_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x49990e1b1b63370eULL;
  static const uint64_t static_value2 = 0xe64f7539c711f8c7ULL;
};

template<class ContainerAllocator>
struct DataType< ::AnhungControl::Battery_<ContainerAllocator> >
{
  static const char* value()
  {
    return "AnhungControl/Battery";
  }

  static const char* value(const ::AnhungControl::Battery_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::AnhungControl::Battery_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float64 Voltage\n"
"float64 Current\n"
"float64 RelativeSOC1\n"
"float64 RelativeSOC2\n"
"float64 RelativeSOC3\n"
"float64 RelativeSOC4\n"
"float64 AbsoluteSOC1\n"
"float64 AbsoluteSOC2\n"
"float64 AbsoluteSOC3\n"
"float64 AbsoluteSOC4\n"
"float64 Temp1\n"
"float64 Temp2\n"
"float64 Temp3\n"
"float64 Temp4\n"
;
  }

  static const char* value(const ::AnhungControl::Battery_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::AnhungControl::Battery_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.Voltage);
      stream.next(m.Current);
      stream.next(m.RelativeSOC1);
      stream.next(m.RelativeSOC2);
      stream.next(m.RelativeSOC3);
      stream.next(m.RelativeSOC4);
      stream.next(m.AbsoluteSOC1);
      stream.next(m.AbsoluteSOC2);
      stream.next(m.AbsoluteSOC3);
      stream.next(m.AbsoluteSOC4);
      stream.next(m.Temp1);
      stream.next(m.Temp2);
      stream.next(m.Temp3);
      stream.next(m.Temp4);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Battery_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::AnhungControl::Battery_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::AnhungControl::Battery_<ContainerAllocator>& v)
  {
    s << indent << "Voltage: ";
    Printer<double>::stream(s, indent + "  ", v.Voltage);
    s << indent << "Current: ";
    Printer<double>::stream(s, indent + "  ", v.Current);
    s << indent << "RelativeSOC1: ";
    Printer<double>::stream(s, indent + "  ", v.RelativeSOC1);
    s << indent << "RelativeSOC2: ";
    Printer<double>::stream(s, indent + "  ", v.RelativeSOC2);
    s << indent << "RelativeSOC3: ";
    Printer<double>::stream(s, indent + "  ", v.RelativeSOC3);
    s << indent << "RelativeSOC4: ";
    Printer<double>::stream(s, indent + "  ", v.RelativeSOC4);
    s << indent << "AbsoluteSOC1: ";
    Printer<double>::stream(s, indent + "  ", v.AbsoluteSOC1);
    s << indent << "AbsoluteSOC2: ";
    Printer<double>::stream(s, indent + "  ", v.AbsoluteSOC2);
    s << indent << "AbsoluteSOC3: ";
    Printer<double>::stream(s, indent + "  ", v.AbsoluteSOC3);
    s << indent << "AbsoluteSOC4: ";
    Printer<double>::stream(s, indent + "  ", v.AbsoluteSOC4);
    s << indent << "Temp1: ";
    Printer<double>::stream(s, indent + "  ", v.Temp1);
    s << indent << "Temp2: ";
    Printer<double>::stream(s, indent + "  ", v.Temp2);
    s << indent << "Temp3: ";
    Printer<double>::stream(s, indent + "  ", v.Temp3);
    s << indent << "Temp4: ";
    Printer<double>::stream(s, indent + "  ", v.Temp4);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ANHUNGCONTROL_MESSAGE_BATTERY_H
