// Generated by gencpp from file AnhungControl/traffic_recv.msg
// DO NOT EDIT!


#ifndef ANHUNGCONTROL_MESSAGE_TRAFFIC_RECV_H
#define ANHUNGCONTROL_MESSAGE_TRAFFIC_RECV_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace AnhungControl
{
template <class ContainerAllocator>
struct traffic_recv_
{
  typedef traffic_recv_<ContainerAllocator> Type;

  traffic_recv_()
    : id(0)
    , GO(0)
    , speed(0.0)  {
    }
  traffic_recv_(const ContainerAllocator& _alloc)
    : id(0)
    , GO(0)
    , speed(0.0)  {
  (void)_alloc;
    }



   typedef int16_t _id_type;
  _id_type id;

   typedef int8_t _GO_type;
  _GO_type GO;

   typedef double _speed_type;
  _speed_type speed;





  typedef boost::shared_ptr< ::AnhungControl::traffic_recv_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::AnhungControl::traffic_recv_<ContainerAllocator> const> ConstPtr;

}; // struct traffic_recv_

typedef ::AnhungControl::traffic_recv_<std::allocator<void> > traffic_recv;

typedef boost::shared_ptr< ::AnhungControl::traffic_recv > traffic_recvPtr;
typedef boost::shared_ptr< ::AnhungControl::traffic_recv const> traffic_recvConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::AnhungControl::traffic_recv_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::AnhungControl::traffic_recv_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::AnhungControl::traffic_recv_<ContainerAllocator1> & lhs, const ::AnhungControl::traffic_recv_<ContainerAllocator2> & rhs)
{
  return lhs.id == rhs.id &&
    lhs.GO == rhs.GO &&
    lhs.speed == rhs.speed;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::AnhungControl::traffic_recv_<ContainerAllocator1> & lhs, const ::AnhungControl::traffic_recv_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace AnhungControl

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::AnhungControl::traffic_recv_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::AnhungControl::traffic_recv_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::AnhungControl::traffic_recv_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::AnhungControl::traffic_recv_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::AnhungControl::traffic_recv_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::AnhungControl::traffic_recv_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::AnhungControl::traffic_recv_<ContainerAllocator> >
{
  static const char* value()
  {
    return "bd53addd57b8245461c1b2a9249d0685";
  }

  static const char* value(const ::AnhungControl::traffic_recv_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xbd53addd57b82454ULL;
  static const uint64_t static_value2 = 0x61c1b2a9249d0685ULL;
};

template<class ContainerAllocator>
struct DataType< ::AnhungControl::traffic_recv_<ContainerAllocator> >
{
  static const char* value()
  {
    return "AnhungControl/traffic_recv";
  }

  static const char* value(const ::AnhungControl::traffic_recv_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::AnhungControl::traffic_recv_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int16 id\n"
"int8 GO\n"
"float64 speed\n"
;
  }

  static const char* value(const ::AnhungControl::traffic_recv_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::AnhungControl::traffic_recv_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.id);
      stream.next(m.GO);
      stream.next(m.speed);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct traffic_recv_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::AnhungControl::traffic_recv_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::AnhungControl::traffic_recv_<ContainerAllocator>& v)
  {
    s << indent << "id: ";
    Printer<int16_t>::stream(s, indent + "  ", v.id);
    s << indent << "GO: ";
    Printer<int8_t>::stream(s, indent + "  ", v.GO);
    s << indent << "speed: ";
    Printer<double>::stream(s, indent + "  ", v.speed);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ANHUNGCONTROL_MESSAGE_TRAFFIC_RECV_H
