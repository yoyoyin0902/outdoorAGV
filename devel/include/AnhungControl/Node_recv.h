// Generated by gencpp from file AnhungControl/Node_recv.msg
// DO NOT EDIT!


#ifndef ANHUNGCONTROL_MESSAGE_NODE_RECV_H
#define ANHUNGCONTROL_MESSAGE_NODE_RECV_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace AnhungControl
{
template <class ContainerAllocator>
struct Node_recv_
{
  typedef Node_recv_<ContainerAllocator> Type;

  Node_recv_()
    : check(0)
    , value(0)
    , kin()
    , id(0)
    , type(0)
    , time(0)
    , btn_finish(false)
    , x(0.0)
    , y(0.0)
    , z(0.0)
    , line(0)
    , radius(0.0)
    , map()
    , floor(0)  {
    }
  Node_recv_(const ContainerAllocator& _alloc)
    : check(0)
    , value(0)
    , kin(_alloc)
    , id(0)
    , type(0)
    , time(0)
    , btn_finish(false)
    , x(0.0)
    , y(0.0)
    , z(0.0)
    , line(0)
    , radius(0.0)
    , map(_alloc)
    , floor(0)  {
  (void)_alloc;
    }



   typedef int8_t _check_type;
  _check_type check;

   typedef int8_t _value_type;
  _value_type value;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _kin_type;
  _kin_type kin;

   typedef int16_t _id_type;
  _id_type id;

   typedef int16_t _type_type;
  _type_type type;

   typedef int32_t _time_type;
  _time_type time;

   typedef uint8_t _btn_finish_type;
  _btn_finish_type btn_finish;

   typedef float _x_type;
  _x_type x;

   typedef float _y_type;
  _y_type y;

   typedef float _z_type;
  _z_type z;

   typedef int8_t _line_type;
  _line_type line;

   typedef float _radius_type;
  _radius_type radius;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _map_type;
  _map_type map;

   typedef int8_t _floor_type;
  _floor_type floor;





  typedef boost::shared_ptr< ::AnhungControl::Node_recv_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::AnhungControl::Node_recv_<ContainerAllocator> const> ConstPtr;

}; // struct Node_recv_

typedef ::AnhungControl::Node_recv_<std::allocator<void> > Node_recv;

typedef boost::shared_ptr< ::AnhungControl::Node_recv > Node_recvPtr;
typedef boost::shared_ptr< ::AnhungControl::Node_recv const> Node_recvConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::AnhungControl::Node_recv_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::AnhungControl::Node_recv_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::AnhungControl::Node_recv_<ContainerAllocator1> & lhs, const ::AnhungControl::Node_recv_<ContainerAllocator2> & rhs)
{
  return lhs.check == rhs.check &&
    lhs.value == rhs.value &&
    lhs.kin == rhs.kin &&
    lhs.id == rhs.id &&
    lhs.type == rhs.type &&
    lhs.time == rhs.time &&
    lhs.btn_finish == rhs.btn_finish &&
    lhs.x == rhs.x &&
    lhs.y == rhs.y &&
    lhs.z == rhs.z &&
    lhs.line == rhs.line &&
    lhs.radius == rhs.radius &&
    lhs.map == rhs.map &&
    lhs.floor == rhs.floor;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::AnhungControl::Node_recv_<ContainerAllocator1> & lhs, const ::AnhungControl::Node_recv_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace AnhungControl

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::AnhungControl::Node_recv_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::AnhungControl::Node_recv_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::AnhungControl::Node_recv_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::AnhungControl::Node_recv_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::AnhungControl::Node_recv_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::AnhungControl::Node_recv_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::AnhungControl::Node_recv_<ContainerAllocator> >
{
  static const char* value()
  {
    return "66cc5de5f9e7ba3174d5b24188e5cfba";
  }

  static const char* value(const ::AnhungControl::Node_recv_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x66cc5de5f9e7ba31ULL;
  static const uint64_t static_value2 = 0x74d5b24188e5cfbaULL;
};

template<class ContainerAllocator>
struct DataType< ::AnhungControl::Node_recv_<ContainerAllocator> >
{
  static const char* value()
  {
    return "AnhungControl/Node_recv";
  }

  static const char* value(const ::AnhungControl::Node_recv_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::AnhungControl::Node_recv_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int8 check\n"
"int8 value\n"
"string kin\n"
"int16 id\n"
"int16 type\n"
"int32 time\n"
"bool btn_finish\n"
"float32 x\n"
"float32 y\n"
"float32 z\n"
"int8 line \n"
"float32 radius\n"
"string map\n"
"int8 floor\n"
;
  }

  static const char* value(const ::AnhungControl::Node_recv_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::AnhungControl::Node_recv_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.check);
      stream.next(m.value);
      stream.next(m.kin);
      stream.next(m.id);
      stream.next(m.type);
      stream.next(m.time);
      stream.next(m.btn_finish);
      stream.next(m.x);
      stream.next(m.y);
      stream.next(m.z);
      stream.next(m.line);
      stream.next(m.radius);
      stream.next(m.map);
      stream.next(m.floor);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Node_recv_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::AnhungControl::Node_recv_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::AnhungControl::Node_recv_<ContainerAllocator>& v)
  {
    s << indent << "check: ";
    Printer<int8_t>::stream(s, indent + "  ", v.check);
    s << indent << "value: ";
    Printer<int8_t>::stream(s, indent + "  ", v.value);
    s << indent << "kin: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.kin);
    s << indent << "id: ";
    Printer<int16_t>::stream(s, indent + "  ", v.id);
    s << indent << "type: ";
    Printer<int16_t>::stream(s, indent + "  ", v.type);
    s << indent << "time: ";
    Printer<int32_t>::stream(s, indent + "  ", v.time);
    s << indent << "btn_finish: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.btn_finish);
    s << indent << "x: ";
    Printer<float>::stream(s, indent + "  ", v.x);
    s << indent << "y: ";
    Printer<float>::stream(s, indent + "  ", v.y);
    s << indent << "z: ";
    Printer<float>::stream(s, indent + "  ", v.z);
    s << indent << "line: ";
    Printer<int8_t>::stream(s, indent + "  ", v.line);
    s << indent << "radius: ";
    Printer<float>::stream(s, indent + "  ", v.radius);
    s << indent << "map: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.map);
    s << indent << "floor: ";
    Printer<int8_t>::stream(s, indent + "  ", v.floor);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ANHUNGCONTROL_MESSAGE_NODE_RECV_H
